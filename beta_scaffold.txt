import battlecode as bc
import random
import sys
import traceback
import time

import os
print(os.getcwd())

print("pystarting")

# A GameController is the main type that you talk to the game with.
# Its constructor will connect to a running game.
gc = bc.GameController()
directions = list(bc.Direction)

print("pystarted")

# It's a good idea to try to keep your bots deterministic, to make debugging easier.
# determinism isn't required, but it means that the same things will happen in every thing you run,
# aside from turns taking slightly different amounts of time due to noise.
random.seed(6111)#number changed from 6137

# let's start off with some research!
# we can queue as much as we want.
gc.queue_research(bc.UnitType.Rocket)
gc.queue_research(bc.UnitType.Worker)
gc.queue_research(bc.UnitType.Knight)

my_team = gc.team()
x=1
flag=0
while True:
    # We only support Python 3, which means brackets around print()
    print('pyround:', gc.round(), 'time left:', gc.get_time_left_ms(), 'ms')
    count=0
    s12=0
    w12=0
    # frequent try/catches are a good idea
    for unit1 in gc.my_units():
        s12 += 1
        if unit1.unit_type == bc.UnitType.Worker:
            w12 += 1
    try:
        # walk through our units:
        for unit in gc.my_units():
            # first, factory logic
            if unit.unit_type == bc.UnitType.Factory:
                garrison = unit.structure_garrison()
                if len(garrison) > 0:
                    d = random.choice(directions)
                    if gc.can_unload(unit.id, d):
                        print('unloaded a knight!')
                        gc.unload(unit.id, d)
                        continue
                elif gc.can_produce_robot(unit.id, bc.UnitType.Worker) and w12<10:
                    gc.produce_robot(unit.id, bc.UnitType.Worker)
                    print('produced a worker!')
                    continue
                elif gc.can_produce_robot(unit.id, bc.UnitType.Knight):
                    gc.produce_robot(unit.id, bc.UnitType.Knight)
                    print('produced a knight!')
                    continue
            # first, let's look for nearby blueprints to work on
            location = unit.location
            if location.is_on_map():
                nearby = gc.sense_nearby_units(location.map_location(), 2)
                for other in nearby:
                    if unit.unit_type == bc.UnitType.Worker and gc.can_build(unit.id, other.id) and gc.get_time_left_ms() > 400:
                        gc.build(unit.id, other.id)
                        print('built a factory!')
                        # move onto the next unit
                        continue
                    elif unit.unit_type == bc.UnitType.Worker and gc.can_build(unit.id, other.id) and gc.get_time_left_ms() <= 400:
                        print('roket ahoy')
                        # please write code for rocket and mars
                        # rocket
                        # rocket
                        # rocket
                        # rocket
                        # rocket
                        # rocket
                        # write code for rocket
                    continue
                    if other.team != my_team and gc.is_attack_ready(unit.id) and gc.can_attack(unit.id, other.id):
                        print('attacked a thing!')
                        gc.attack(unit.id, other.id)
                        continue

            if flag == 1 and gc.can_harvest(unit.id, x) and gc.karbonite < 100 and count < (5+s12/10):
                gc.harvest(unit.id, x)
                count += 1
                continue
            d = random.choice(directions)
            x = d
            flag=1
            # or, try to build a factory:
            if gc.karbonite() > bc.UnitType.Factory.blueprint_cost() and gc.can_blueprint(unit.id, bc.UnitType.Factory, d):
                gc.blueprint(unit.id, bc.UnitType.Factory, d)

            elif gc.is_move_ready(unit.id) and gc.can_move(unit.id, d):
                gc.move_robot(unit.id, d)
    except Exception as e:
        print('Errorify_it:', e)
        # use this to show where the error was
        traceback.print_exc()
    gc.next_turn()
    sys.stdout.flush()
    sys.stderr.flush()
